version: 2

node-image: &node-image
  image: circleci/node:12.22.0

set-npm-global: &set-npm-global
  run:
    name: set-npm-global
    command: |
      mkdir -p ~/.npm-global
      npm config set prefix '~/.npm-global'
      echo 'export NPM_CONFIG_PREFIX=~/.npm-global' >> $BASH_ENV
      echo 'export PATH=~/.npm-global/bin:$PATH' >> $BASH_ENV
      source $BASH_ENV
save: &save
  save_cache:
    key: code-{{ .Revision }}
    paths:
      - .
      - ".git"
      - "~/.npm-global"

restore: &restore
  restore_cache:
    key: code-{{ .Revision }}

jobs:
  install:
    docker:
      - <<: *node-image
    steps:
      - checkout
      - <<: *set-npm-global
      - run: npm install -g npm@$(jq -r '.engines.npm' package.json)
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "client-auth/package.json" }}
      - run: npm ci
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - save_cache:
          key: dependency-cache-{{ checksum "client-auth/package.json" }}
          paths:
            - ./client-auth/node_modules
      - <<: *save
  lint:
    docker:
      - <<: *node-image
    steps:
      - <<: *restore
      - run: npm run lint
  test:
    docker:
      - <<: *node-image
        environment:
          - DATABASE_URL=postgres://ubuntu:ubuntu@127.0.0.1:5432/circle_test
          - ALLOW_UNSECURE=1
          - DOMAIN=localhost:3001
          - PORT=3001
      - image: postgres:10.16-alpine
        environment:
          - POSTGRES_USER=ubuntu
          - POSTGRES_PASSWORD=ubuntu
          - POSTGRES_DB=circle_test
    steps:
      - <<: *restore
      - run:
          # https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#running-puppeteer-on-circleci
          name: Install Headless Chrome dependencies
          command: |
            sudo apt-get install -yq \
            gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
            libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
            libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
            libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates \
            fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
      - run:
          name: test
          command: npm run migrate up && npm test
  build:
    docker:
      - <<: *node-image
    steps:
      - <<: *restore
      - run:
          name: prepare-config
          command: |
            cat > .env << 'EOF'
            PORT=3001
            DOMAIN=localhost:3001
            ALLOW_UNSECURE=1
            SSL_KEY_FILE=
            CERT_SSL_FILE=
            EOF
      - run: docker-compose -f docker-compose.yml -f docker-compose.production.yml config > docker-compose.prod.yml
      - store_artifacts:
          path: docker-compose.prod.yml
          destination: docker-compose.prod.yml


workflows:
  version: 2
  main_workflow:
    jobs:
      - install
      - lint:
          requires:
            - install
      - test:
          requires:
            - install
      - build:
          requires:
            - lint
            - test
